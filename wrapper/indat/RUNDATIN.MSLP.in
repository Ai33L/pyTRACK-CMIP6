	int nnzs = 7;

	unique_ptr<CSRMatrix<double>> A_sparse = make_unique<CSRMatrix<double>>(rows, cols, nnzs, true);

	double A_ex_sparse[7] = { 8,4,2,4,6,2,3 };
	double A_sparse_col[7] = { 0,1,2,0,1,0,2 };
	double A_sparse_row[4] = { 0,3,5,7 };
	for (int i = 0; i < nnzs; i++)
	{
		A_sparse->values[i] = A_ex_sparse[i];
		A_sparse->col_index[i] = A_sparse_col[i];
	}
	for (int i = 0; i < rows + 1; i++)
		A_sparse->row_position[i] = A_sparse_row[i];

	cout << endl << endl;
	A_sparse->printMatrix();
	
	//ughhhhh hhhhhhhhhh
	CSRMatrix<double>* L_sparse = A_sparse->cholesky();
	cout << endl << endl << "Sparse cholesky\n\nPrint L\n\n";
	L_sparse->printMatrix();

	auto *y = A_sparse->Cholesky_solve(b);

	cout << "\n\nPrint sparse solution\n";
	for (int i = 0; i < cols; i++)
	{
		cout << y[i] << " ";
	}
	cout << endl;
	delete[] y;
	delete L_sparse;